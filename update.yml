# Uncomment the following to the next seperator to use an Ansible hosts file
# - hosts: servers
#   become: yes
#   become_user: root
#   become_method: sudo

# ----------------------------------------

# Comment the following to the next seperator to be prompted for an IP or hostname of a host
#
# Usage:
# $ ansible-playbook --private-key ~/ansible/server/ssh/id_rsa ~/ansible/scripts/update.yml -u <ansible_user> -K
# or
# $ ansible-playbook ~/ansible/scripts/update.yml -u <privilaged_user> -K -k

- hosts: localhost
  gather_facts: no
  vars_prompt:
  - name: target_host
    prompt: Please enter the target host(s) IP or DNS name (Seperate multiple hosts with comma)
    private: no
  tasks:
    - add_host:
        name: "{{ item }}"
        groups: dynamically_created_hosts
      with_items: "{{ target_host.split(',') }}"
- hosts: dynamically_created_hosts
  become: yes
  become_user: root
  become_method: sudo

# ----------------------------------------

  tasks:
  - name: Update Debian-based systems
    block:

    - name: Install aptitude for better apt update support with Ansible
      apt:
        name: "aptitude"
        state: latest


    - name: Update Server via Apt
      apt:
        upgrade: dist
        update_cache: yes

    - name: Check if reboot is required
      stat:
        path: /var/run/reboot-required
      register: reboot_required_file

    - name: display post update message
      debug:
        msg:
          - 'Update of {{ ansible_hostname }} completed'
          - '- No reboot required'
      when: reboot_required_file.stat.exists == False

    - name: Prompt for rebooting
      pause:
        prompt: "Press ENTER to reboot {{ ansible_hostname }} now, or Ctrl+C to abort."
      # when: "'reboot_required_file' in hostvars[item] and hostvars[item]['reboot_required_file'].stat.exists"
      when: reboot_required_file.stat.exists == True
      # with_items: "{{ play_hosts }}"


    - name: Reboot if required
      reboot:
        pre_reboot_delay: 5
        post_reboot_delay: 15
        msg: "System reboot required to complete update phase. Reboot initiated by Ansible::Update"
      when: reboot_required_file.stat.exists == True


    - name: Wait for the reboot to complete if there was a change.
      wait_for_connection:
        connect_timeout: 20
        sleep: 5
        delay: 5
        timeout: 300
      when: reboot_required_file.stat.exists == True

    - name: display post reboot update message
      debug:
        msg:
          - 'Update of {{ ansible_hostname }} completed'
          - '- System rebooted'
      when: reboot_required_file.stat.exists == True


    when: ansible_os_family == "Debian"

# ----------------------------------------

  - name: Update RHEL-based systems
    block:

    - name: Install yum-utils so we can poll for reboot requirement
      yum:
        name: "{{ansible_pkg_mgr}}-utils"
        state: latest

    - name: Update Server via YUM
      yum:
        name: '*'
        state: latest

# Currently on works on RHEL/CentOS 7 - 8 is waiting for an update to dnf-utils.
    - name: Check if reboot is required yum
      command: /bin/needs-restarting -r
      register: reboot_required_yumu
      ignore_errors: True
      changed_when: False
      when: ansible_distribution_major_version == "7"

    - name: display post update message
      debug:
        msg:
          - 'Update of {{ ansible_hostname }} completed'
          - '- No reboot required'
      when: reboot_required_yumu.rc == 0

    - name: Prompt for rebooting
      pause:
        prompt: "Press ENTER to reboot {{ ansible_hostname }} now, or Ctrl+C to abort."
      # when: "'reboot_required_yumu' in hostvars[item] and hostvars[item]['reboot_required_yumu'].rc == 1"
      when: reboot_required_yumu.rc == 1
      # with_items: "{{ play_hosts }}"



    - name: Reboot if required
      reboot:
        pre_reboot_delay: 5
        post_reboot_delay: 15
        msg: "System reboot required to complete update phase. Reboot initiated by Ansible::Update"
      when: reboot_required_yumu.rc == 1


    - name: Confirm the reboot was successful
      wait_for_connection:
        connect_timeout: 20
        sleep: 5
        delay: 5
        timeout: 300
      when: reboot_required_yumu.rc == 1


    - name: display post reboot update message
      debug:
        msg:
          - 'Update of {{ ansible_hostname }} completed'
          - '- System rebooted'
      when: reboot_required_yumu.rc == 1

    when: ansible_os_family == "RedHat"
