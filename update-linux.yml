- hosts: linux-servers
  become: yes
  become_user: root
  become_method: sudo
  
  tasks:

  - name: Update Debian-based systems
    block:

    - name: Update Server via Apt
      apt:
        upgrade: dist
        update_cache: yes

    - name: Check if reboot is required
      stat:
        path: /var/run/reboot-required
      register: reboot_required_file

    - name: display post update message
      debug:
        msg:
          - 'Update of {{ ansible_hostname }} completed'
          - '- No reboot required'
      when: reboot_required_file.stat.exists == False

    - name: Prompt for rebooting
      pause:
        prompt: "Press ENTER to reboot {{ ansible_hostname }} now, or Ctrl+C to abort."
      # when: "'reboot_required_file' in hostvars[item] and hostvars[item]['reboot_required_file'].stat.exists"
      when: reboot_required_file.stat.exists == True
      # with_items: "{{ play_hosts }}"

    - name: Reboot the Server if required
      shell: ( /bin/sleep 5 ; /sbin/shutdown -r now "Ansible Updates Triggered" ) &
      async: 1
      poll: 0
      when: reboot_required_file.stat.exists == True

    - name: Wait for the reboot to complete if there was a change.
      wait_for_connection:
        connect_timeout: 20
        sleep: 5
        delay: 5
        timeout: 300
      when: reboot_required_file.stat.exists == True

    - name: display post reboot update message
      debug:
        msg:
          - 'Update of {{ ansible_hostname }} completed'
          - '- System rebooted'
      when: reboot_required_file.stat.exists == True


    when: ansible_os_family == "Debian"

# ----------------------------------------

  - name: Update RHEL-based systems
    block:

    - name: Install yum-utils so we can poll for reboot requirement
      yum:
        name: yum-utils
        state: latest

    - name: Update Server via YUM
      yum:
        name: '*'
        state: latest

    - name: Check if reboot is required
      command: /bin/needs-restarting -r
      register: reboot_required_yumu
      ignore_errors: True
      changed_when: False

    - name: display post update message
      debug:
        msg:
          - 'Update of {{ ansible_hostname }} completed'
          - '- No reboot required'
      when: reboot_required_yumu.rc == 0

    - name: Prompt for rebooting
      pause:
        prompt: "Press ENTER to reboot {{ ansible_hostname }} now, or Ctrl+C to abort."
      # when: "'reboot_required_yumu' in hostvars[item] and hostvars[item]['reboot_required_yumu'].rc == 1"
      when: reboot_required_yumu.rc == 1
      # with_items: "{{ play_hosts }}"

    - name: Reboot the Server if required
      shell: ( /bin/sleep 5 ; /sbin/shutdown -r now "Ansible Updates Triggered" ) &
      async: 1
      poll: 0
      when: reboot_required_yumu.rc == 1

    - name: Wait for the reboot to complete if there was a change.
      wait_for_connection:
        connect_timeout: 20
        sleep: 5
        delay: 5
        timeout: 300
      when: reboot_required_yumu.rc == 1

    - name: display post reboot update message
      debug:
        msg:
          - 'Update of {{ ansible_hostname }} completed'
          - '- System rebooted'
      when: reboot_required_yumu.rc == 1

    when: ansible_os_family == "RedHat"
